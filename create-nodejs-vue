#!/bin/bash

# Check if the project name was provided
if [ -z "$1" ]; then
  echo "Usage: create-nodejs-vue [project-name]"
  exit 1
fi

# Project name
PROJECT_NAME=$1

# Ask the user for the app name, use the project name as the default value
read -p "Inserisci il nome dell'app (default: $PROJECT_NAME): " APP_NAME
APP_NAME=${APP_NAME:-$PROJECT_NAME}  # If empty, use the project name

# Create the project folder
mkdir "$PROJECT_NAME" && cd "$PROJECT_NAME" || { echo "Failed to enter project directory"; exit 1; }

# Function to show the loading bar
loading_bar() {
  local total_steps=40  # Total number of steps for the bar
  local progress=0

  # Show the loading bar in a loop until the process ends
  printf "Creating project: "
  while [ "$progress" -le "$total_steps" ]; do
    # Calculate the percentage
    local percent=$((progress * 100 / total_steps))

    # Build the bar with vertical rectangles
    printf "\rCreating project: "
    for ((i = 0; i < progress; i++)); do
      printf "â–ˆ"   # Full rectangle
    done
    for ((i = progress; i < total_steps; i++)); do
      printf " "  # Empty space
    done
    printf " %d%%" "$percent"

    # Increment the progress
    progress=$((progress + 1))
    sleep 0.1  # Delay to visualize the animation
  done
  printf "\n"  # Move to the next line after completion
}

# Start the loading bar in the background
loading_bar &

# Get the PID of the loading bar
LOADING_BAR_PID=$!

# Create the backend directory
mkdir -p backend || { echo "Failed to create backend directory"; exit 1; }
cd backend || { echo "Failed to enter backend directory"; exit 1; }

# Initialize the Node.js project
npm init -y > /dev/null 2>&1 || { echo "Failed to initialize Node.js project"; exit 1; }

# Increment the loading bar
sleep 0.5

# Manually create the package.json file
cat > package.json <<EOL
{
  "name": "$PROJECT_NAME-backend",
  "version": "1.0.0",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "dotenv": "^8.2.0",
    "nodemon": "^2.0.4"
  }
}
EOL

# Install Node.js packages and Vite with Vue 3
npm install --save express dotenv nodemon bootstrap @popperjs/core > /dev/null 2>&1 || { echo "Failed to install Node.js packages"; exit 1; }

# Create the server.js file with configured Express
cat > server.js <<EOL
import express from 'express';
import dotenv from 'dotenv';
import path from 'path';

// Load environment variables from .env file
dotenv.config();

const app = express();
const port = process.env.PORT || 8080;

// Serve static files from frontend/dist
app.use(express.static(path.join(process.cwd(), 'frontend', 'dist')));

// Middleware to handle 404 errors
app.use((req, res) => {
  res.status(404).sendFile(path.join(process.cwd(), 'frontend', 'dist', 'index.html'));
});

app.listen(port, () => {
  console.log(\`Server is running on http://localhost:\${port}\`);
});
EOL

# Create the frontend directory
cd .. || { echo "Failed to return to project root"; exit 1; }
mkdir -p frontend || { echo "Failed to create frontend directory"; exit 1; }
cd frontend || { echo "Failed to enter frontend directory"; exit 1; }

# Create the main file and Vite configuration
npx --yes create-vite@latest . --template vue > /dev/null 2>&1 || { echo "Failed to create Vite project"; exit 1; }
npm install > /dev/null 2>&1 || { echo "Failed to install frontend dependencies"; exit 1; }
npm install vue-router@4 > /dev/null 2>&1 || { echo "Failed to install vue-router"; exit 1; }
npm install bootstrap@5.3.3 > /dev/null 2>&1 || { echo "Failed to install Bootstrap"; exit 1; }

# Create the router and views directories
mkdir -p src/router || { echo "Failed to create router directory"; exit 1; }
mkdir -p src/views || { echo "Failed to create views directory"; exit 1; }

# Remove the HelloWorld component
rm src/components/HelloWorld.vue || { echo "Failed to remove HelloWorld component"; exit 1; }
rm public/vite.svg || { echo "Failed to remove Vite logo"; exit 1; }

# Add the NodeJS logo
cp ~/bash_scripts/scaffolding-script-vue-nodejs/nodejs.svg src/assets/ || { echo "Failed to copy NodeJS logo"; exit 1; }


# Create the Header component
cat > src/components/Header.vue <<EOL
<script setup>
import { useRouter } from 'vue-router';

// Get the routes from the router
const router = useRouter();

// Filter the routes to get only those that have a name 
const routes = router.options.routes.filter(route => route.name);

defineProps(['appName']);
</script>

<template>
  <header class="bg_primary text-white py-3">
    <div class="container">
      <div class="row align-items-center">
        <div class="col-auto d-flex align-items-center">
          <h1 class="h5 mb-0">{{ appName }}</h1>
        </div>
        <div class="col-auto ms-auto">
          <nav>
            <ul class="list-unstyled d-flex mb-0">
              <!-- Add links dynamically based on the routes -->
              <li v-for="route in routes" :key="route.name" class="me-3">
                <a :href="route.path" class="text-white text-decoration-none">{{ route.name }}</a>
              </li>
            </ul>
          </nav>
        </div>
      </div>
    </div>
  </header>
</template>

<style scoped></style>
EOL


# Create the Card component
cat > src/components/Card.vue <<EOL
<script setup>
const props = defineProps({
  icon: {
    type: String,
    required: true
  },
  title: {
    type: String,
    required: true
  },
  description: {
    type: String,
    required: true
  },
  link: {
    type: String,
    required: true
  },
  buttonText: {
    type: String,
    default: 'Learn More'
  }
});
</script>

<template>
  <div class="card h-100 text-center border-0 shadow-sm">
    <div class="card-body d-flex flex-column align-items-center">
      <img :src="props.icon" :alt="props.title" class="mb-3" style="width: 64px; height: 64px;">
      <h2 class="h5 card-title text_primary mb-3">{{ props.title }}</h2>
      <p class="card-text flex-grow-1">{{ props.description }}</p>
      <a :href="link" target="_blank" rel="noopener noreferrer" class="btn btn_primary mt-auto">
        {{ buttonText }}
      </a>
    </div>
  </div>
</template>

<style scoped>
.card {
  background-color: #EDF2FB;
  border-radius: 16px;
  transition: transform 0.3s ease-in-out;
}

.card:hover {
  transform: translateY(-5px);
}
</style>
EOL


# Create the Footer component
cat > src/components/Footer.vue <<EOL
<script setup>
import { computed } from 'vue'

const currentYear = computed(() => new Date().getFullYear())
</script>

<template>
  <footer class="bg_primary text-white py-3 mt-4">
    <div class="container text-center">
      <p class="mb-0">
        &copy; {{ currentYear }} My Vue3 + NodeJS App. All rights reserved.
      </p>
    </div>
  </footer>
</template>

<style scoped></style>
EOL


# Create the Homepage
cat > src/views/Homepage.vue <<EOL
<script setup>
import Header from '../components/Header.vue'
import Card from '../components/Card.vue'
import Footer from '../components/Footer.vue'
import { ref } from 'vue'

// Load the app name from the .env file
const appName = ref(import.meta.env.VITE_APP_NAME)
</script>

<template>
  <div class="d-flex flex-column min-vh-100">
    <Header :appName="appName" />
    <main class="flex-grow-1 py-4">
      <div class="container">

        <div class="text-center mb-5">
          <h2 class="display-4 fw-bold mb-3 text_primary">Welcome to {{ appName }}</h2>
          <p class="lead fs-3 text_secondary mb-4">Start creating your web-application</p>
        </div>

        <div class="row g-4">
          <div class="col-md-6">
            <Card icon="src/assets/vue.svg" title="Vue 3 Documentation"
              description="Learn more about Vue 3 and its powerful features for building modern web applications."
              link="https://v3.vuejs.org/" buttonText="Explore Vue 3" />
          </div>
          <div class="col-md-6">
            <Card icon="src/assets/nodejs.svg" title="Node.js Documentation"
              description="Discover the capabilities of Node.js for building scalable and efficient server-side applications."
              link="https://nodejs.org/en/docs/" buttonText="Explore Node.js" />
          </div>
        </div>
      </div>
    </main>
    <Footer />
  </div>
</template>

<style scoped></style>
EOL


# Create the About Us pages
cat > src/views/About.vue <<EOL
<script setup>
import Header from '../components/Header.vue'
import Footer from '../components/Footer.vue'
import { ref } from 'vue'

// Load the app name from the .env file
const appName = ref(import.meta.env.VITE_APP_NAME)

</script>

<template>
  <div class="d-flex flex-column min-vh-100">
    <Header :appName="appName" />
    <main class="flex-grow-1">
      <div class="container py-5">
        <div class="text-center mb-5">
          <h2 class="display-4 fw-bold text_primary mb-3">About Us</h2>
          <p class="lead fs-3 text_secondary mb-4">Empowering developers to create beautiful, responsive web
            applications</p>
        </div>

        <div class="row mb-5">
          <div class="col-lg-6 mb-4 mb-lg-0">
            <h3 class="h4 text_primary mb-3">Our Mission</h3>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Perferendis iusto sequi nesciunt tempore ad
              asperiores non neque autem omnis labore sapiente distinctio cum blanditiis consequatur quo harum saepe a,
              voluptate consectetur minus libero. Soluta, nobis!</p>
          </div>
          <div class="col-lg-6">
            <h3 class="h4 text_primary mb-3">Our Vision</h3>
            <p>Lorem ipsum dolor sit amet consectetur adipisicing elit. Atque quaerat eaque nostrum totam quae animi
              odit deleniti tempore architecto corrupti nam tenetur nobis, possimus obcaecati repellendus numquam quo
              labore, sunt sint quidem doloremque at. Nobis?</p>
          </div>
        </div>

      </div>
    </main>
    <Footer />
  </div>
</template>

<style scoped></style>
EOL


# Modify the style.css file
cat <<EOL > src/style.css
:root {
  --color-primary: #5e548e;
  --color-secondary: #be95c4;
  --color-light: #edf2fb;
  --color-lighter: #fdfdff;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  place-items: center;
  min-width: 320px;
  height: 100vh;
  background-color: var(--color-lighter);
}

#app {
  margin: 0 auto;
  text-align: center;
}

.bg_primary {
  background-color: var(--color-primary);
}

.text_light {
  color: var(--color-light);
}

.text_primary {
  color: var(--color-primary);
}

.text_secondary {
  color: var(--color-secondary);
}

.btn_primary {
  background-color: var(--color-primary);
  border-color: var(--color-primary);
  color: white;
}

.btn_primary:hover {
  background-color: #9f86c0;
  border-color: #9f86c0;
  color: #231942;
}
EOL


# Create the router configuration file
cat > src/router/router.js <<EOL
import { createRouter, createWebHistory } from 'vue-router'
import HomePage from '../views/HomePage.vue'
import About from '../views/About.vue'

const routes = [
  {
    path: '/',
    name: 'Home',
    component: HomePage,
    meta: {
      label: 'Homepage'
    }
  },
  {
    path: '/about',
    name: 'About',
    component: About,
    meta: {
      label: 'About Us'
    }
  }
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

export default router

EOL


# Modify Vite configuration file
cat > vite.config.js <<EOL
import { defineConfig } from 'vite';
import vue from '@vitejs/plugin-vue';

export default defineConfig({
  plugins: [vue()],
  define: {
    'process.env': process.env
  }
})
EOL


# Modify main.js file
cat > src/main.js <<EOL
import { createApp } from 'vue';
import App from './App.vue';
import 'bootstrap/dist/css/bootstrap.min.css';
import 'bootstrap';
import './style.css';
import router from './router/router.js';

// Aggiungi un global beforeEach per cambiare il titolo della pagina
router.beforeEach((to, from, next) => {
  const appName = import.meta.env.VITE_APP_NAME || 'App'
  const pageTitle = to.meta.title || 'Page'
  
  document.title = \`\${appName} - \${pageTitle}\`
  next()
})

createApp(App).use(router).mount('#app');
EOL


# Modify App.vue file
cat > src/App.vue <<EOL
<script>
export default {
  name: 'App'
}
</script>

<template>
  <router-view />
</template>
EOL


# Create .gitignore file
cat > .gitignore <<EOL
node_modules/
.env
frontend/node_modules/
frontend/dist/
EOL

# Create .env file
cat > .env <<EOL
VITE_APP_NAME=$APP_NAME
APP_ENV=development
APP_DEBUG=true
APP_URL=http://localhost:8000

PORT=8080

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=${APP_NAME}_db
DB_USERNAME=root
DB_PASSWORD=root
EOL


# Finish the loading bar
# kill $LOADING_BAR_PID
wait $LOADING_BAR_PID 2> /dev/null
printf "\rProject created successfully!\n"
printf "To run the server, navigate to the backend directory and use:\n"
printf "\nnpm run dev\n"
printf "To run the frontend, navigate to the frontend directory and use:\n"
printf "\nnpm run dev\n"
